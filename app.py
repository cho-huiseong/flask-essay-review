from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from openai import OpenAI
import os
import re
import json

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/review", methods=["POST"])
def review():
    data = request.get_json()
    passages = data.get("passages", [])
    question = data.get("question", "")
    essay = data.get("essay", "")
    char_base = data.get("charBase")
    char_range = data.get("charRange")

    labels = ['Í∞Ä','ÎÇò','Îã§','Îùº','Îßà','Î∞î']
    passage_text = "\n".join([f"Ï†úÏãúÎ¨∏ <{labels[i]}>: {p}" for i, p in enumerate(passages)])

    try:
        base = int(char_base)
        delta = int(char_range)
        min_chars = base - delta
        max_chars = base + delta
    except:
        min_chars = 0
        max_chars = 9999

    prompt = f"""
ÎãπÏã†ÏùÄ Ï¥àÎì±ÌïôÏÉùÏùÑ Í∞ÄÎ•¥ÏπòÎäî ÎÖºÏà† ÏÑ†ÏÉùÎãòÏûÖÎãàÎã§.

Îã§ÏùåÏùÄ ÎÖºÏà† ÌèâÍ∞Ä Í∏∞Ï§ÄÏûÖÎãàÎã§:

[ÎÖºÎ¶¨Î†•] ÎÖºÏ†úÍ∞Ä Î¨ºÏñ¥Î≥∏ Í≤ÉÏóê ÎãµÌñàÎäîÍ∞Ä? Ï£ºÏû•ÏùÑ Î∞ùÌòîÎäîÍ∞Ä? Ï£ºÏû•Ïóê Ï†ÅÏ†àÌïú ÍπåÎã≠ÏùÑ Î∞ùÌòîÎäîÍ∞Ä?
[ÎèÖÌï¥Î†•] Ï†úÏãúÎ¨∏Ïóê ÏûàÎäî ÎÇ¥Ïö©ÏúºÎ°úÎßå Íµ¨ÏÑ±ÎêòÏóàÎäîÍ∞Ä? Ï†úÏãúÎ¨∏ Î∂ÑÏÑùÏù¥ Ïò¨Î∞îÎ•¥Í≤å Ïù¥Î£®Ïñ¥Ï°åÎäîÍ∞Ä?
[Íµ¨ÏÑ±Î†•] Î¨∏Îã® Îì§Ïó¨Ïì∞Í∏∞, Íµ¨Î∂ÑÏù¥ ÌôïÏã§ÌïòÍ≤å ÎêòÏñ¥ ÏûàÎäîÍ∞Ä? ÎÖºÎ¶¨Ï†Å ÌùêÎ¶ÑÏù¥ Î∞©Ìï¥ÎêòÏßÄ ÏïäÎäîÍ∞Ä?
[ÌëúÌòÑÎ†•] Î¨∏Î≤ïÏóê ÎßûÎäî Î¨∏Ïû•ÏùÑ Íµ¨ÏÇ¨ÌñàÎäîÍ∞Ä? Ï†ÅÏ†àÌïú Ïñ¥ÌúòÎ•º ÏÇ¨Ïö©ÌñàÎäîÍ∞Ä? ÎßûÏ∂§Î≤ï ÌëúÍ∏∞Í∞Ä ÌãÄÎ¶¨ÏßÄ ÏïäÏïòÎäîÍ∞Ä?

---

Ï†úÏãúÎ¨∏:
{passage_text}

ÏßàÎ¨∏:
{question}

ÎÖºÏà†Î¨∏:
{essay}

---

‚ùó ÏïÑÎûò ÌòïÏãùÏùÑ Î∞òÎìúÏãú Í∑∏ÎåÄÎ°ú ÏßÄÏºúÏÑú ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî:

[ÎÖºÎ¶¨Î†•]  
Ï†êÏàò: (0~10 ÏÇ¨Ïù¥Ïùò Ï†ïÏàòÎßå)  
Ïù¥Ïú†: (Ìïú Î¨∏Ïû• Ïù¥ÏÉÅ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏûëÏÑ±)

[ÎèÖÌï¥Î†•]  
Ï†êÏàò: (Ï†ïÏàòÎßå)  
Ïù¥Ïú†: ...

[Íµ¨ÏÑ±Î†•]  
Ï†êÏàò: (Ï†ïÏàòÎßå)  
Ïù¥Ïú†: ...

[ÌëúÌòÑÎ†•]  
Ï†êÏàò: (Ï†ïÏàòÎßå)  
Ïù¥Ïú†: ...

‚ùó Îã§Î•∏ ÌòïÏãùÏùÄ ÏÇ¨Ïö©ÌïòÏßÄ ÎßêÍ≥† ÏúÑÏôÄ Í∞ôÏù¥ Ïà´Ïûê Ï†êÏàòÏôÄ Ïù¥Ïú†Î•º Ìï≠Î™©Î≥ÑÎ°ú Î∂ÑÎ¶¨Ìï¥ÏÑú Î∞òÎìúÏãú ÏûëÏÑ±ÌïòÏÑ∏Ïöî.
ÏòàÏãúÎãµÏïàÏùÄ ÏßÄÍ∏à ÏûëÏÑ±ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "ÎÑàÎäî Ï¥àÎì± ÎÖºÏà† Ï≤®ÏÇ≠ ÏÑ†ÏÉùÎãòÏù¥Ïïº. ÌèâÍ∞Ä Í∏∞Ï§ÄÏóê Îî∞Îùº ÌèâÍ∞ÄÎßå ÏûëÏÑ±Ìï¥."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        content = response.choices[0].message.content
        print("\nüì• GPT ÌèâÍ∞Ä ÏùëÎãµ:\n", content)

        sections = {"ÎÖºÎ¶¨Î†•": {}, "ÎèÖÌï¥Î†•": {}, "Íµ¨ÏÑ±Î†•": {}, "ÌëúÌòÑÎ†•": {}}
        current = None

        for line in content.splitlines():
            line = line.strip()
            if line.startswith("[ÎÖºÎ¶¨Î†•]"): current = "ÎÖºÎ¶¨Î†•"
            elif line.startswith("[ÎèÖÌï¥Î†•]"): current = "ÎèÖÌï¥Î†•"
            elif line.startswith("[Íµ¨ÏÑ±Î†•]"): current = "Íµ¨ÏÑ±Î†•"
            elif line.startswith("[ÌëúÌòÑÎ†•]"): current = "ÌëúÌòÑÎ†•"
            elif current:
                if "score" not in sections[current]:
                    score_match = re.search(r"(\d{1,2})", line)
                    if score_match:
                        sections[current]["score"] = int(score_match.group(1))
                if "Ïù¥Ïú†" in line:
                    sections[current]["reason"] = line.split(":", 1)[-1].strip()
                elif "reason" not in sections[current]:
                    sections[current]["reason"] = line

        for k in sections:
            sections[k].setdefault("score", 0)
            sections[k].setdefault("reason", "Ïù¥Ïú† ÏóÜÏùå")

        return jsonify({
            "scores": [sections[k]["score"] for k in ["ÎÖºÎ¶¨Î†•", "ÎèÖÌï¥Î†•", "Íµ¨ÏÑ±Î†•", "ÌëúÌòÑÎ†•"]],
            "reasons": {k: sections[k]["reason"] for k in ["ÎÖºÎ¶¨Î†•", "ÎèÖÌï¥Î†•", "Íµ¨ÏÑ±Î†•", "ÌëúÌòÑÎ†•"]}
        })

    except Exception as e:
        print("‚ùóÏòàÏô∏ Î∞úÏÉù (Ï†ÑÏ≤¥ try):", str(e), flush=True)
        return jsonify({"error": str(e)}), 500


@app.route("/example", methods=["POST"])
def example():
    data = request.json
    passages = data.get('passages', [])
    question = data.get('question', '')
    essay = data.get('essay', '')
    retry = data.get('retryConfirmed', False)

    try:
        char_base = int(data.get('charBase')) if data.get('charBase') else 600
        char_range = int(data.get('charRange')) if data.get('charRange') else 100
    except:
        char_base = 600
        char_range = 100

    min_chars = char_base - char_range
    if retry:
        min_chars += 100
        print(f"üîÅ Ïû¨ÏöîÏ≤≠ÏúºÎ°ú Í∏∞Ï§Ä Í∏ÄÏûê Ïàò Ï¶ùÍ∞Ä: {min_chars}Ïûê Ïù¥ÏÉÅ")

    initial_prompt = f"""
ÏïÑÎûòÎäî ÌïôÏÉùÏù¥ ÏûëÏÑ±Ìïú ÎÖºÏà†Î¨∏ÏûÖÎãàÎã§. Ïù¥ Í∏ÄÏùÑ Î∞îÌÉïÏúºÎ°ú Îã§Ïùå ÏûëÏóÖÏùÑ ÏàòÌñâÌï¥ Ï£ºÏã≠ÏãúÏò§.

1. ÌïôÏÉùÏùò ÎÖºÏà†Î¨∏ÏùÑ Í∏∞Î∞òÏúºÎ°ú, ÌèâÍ∞Ä Í∏∞Ï§ÄÏùÑ Í≥†Î†§ÌïòÏó¨ ÏòàÏãúÎãµÏïàÏùÑ ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§.
- Î¨∏Ï≤¥Îäî Í≥†Îì±ÌïôÍµê ÎÖºÏà† ÌèâÍ∞ÄÏóê Ï†ÅÌï©ÌïòÍ≤å Îã®Ï†ïÌïòÍ≥† Í∞ùÍ¥ÄÏ†ÅÏù∏ ÏÑúÏà†ÏùÑ Ïú†ÏßÄÌïòÏã≠ÏãúÏò§.
- ÏòàÏãúÎãµÏïàÏùÄ Ï†úÏãúÎ¨∏Ïóê Ìè¨Ìï®Îêú Ï†ïÎ≥¥ÏôÄ Ï£ºÏû• ÌùêÎ¶ÑÏùÑ Ï§ëÏã¨ÏúºÎ°ú Íµ¨ÏÑ±ÌïòÏã≠ÏãúÏò§.
- Ï†úÏãúÎ¨∏ Ï†ïÎ≥¥Î•º Ìï¥ÏÑù¬∑Ï°∞Ìï©ÌïòÏó¨ ÎÖºÏßÄÎ•º Ï†ÑÍ∞úÌï¥Ïïº Ìï©ÎãàÎã§.
- Ï†úÏãúÎ¨∏ Ïô∏Ïùò Î∞∞Í≤ΩÏßÄÏãùÏùÄ ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏã≠ÏãúÏò§.
- Î™®Îì† Ï£ºÏû•Í≥º Í∑ºÍ±∞Îäî Ï†úÏãúÎ¨∏ÏóêÏÑú Ï∂úÎ∞úÌïú ÎÇ¥Ïö©Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.
- ÏòàÏãúÎãµÏïà ÏÑúÎëêÏóê ÏßàÎ¨∏Ïóê ÎåÄÌïú Î™ÖÌôïÌïú ÎãµÎ≥ÄÏùÑ Î∞òÎìúÏãú Ï†úÏãúÌïòÏã≠ÏãúÏò§.
- Í∏ÄÏûê ÏàòÎäî ÌïôÏÉùÏù¥ ÏûëÏÑ±Ìïú ÎÖºÏà†Î¨∏ Í∏∞Ï§Ä({char_base} ¬± {char_range}Ïûê) ÎÇ¥ÏóêÏÑú ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§.

2. ÏòàÏãúÎãµÏïàÍ≥º ÌïôÏÉùÏùò ÎÖºÏà†Î¨∏ÏùÑ ÎπÑÍµêÌïòÏó¨ Î∂ÑÏÑùÌïòÏã≠ÏãúÏò§. Í∞Å Ìï≠Î™©Î≥ÑÎ°ú Îã§ÏùåÏùÑ Ìè¨Ìï®ÌïòÏã≠ÏãúÏò§:
- ÌïôÏÉùÏùò ÎØ∏Ìù°Ìïú Î¨∏Ïû• (ÏßÅÏ†ë Ïù∏Ïö©)
- Ïñ¥Îñ§ ÌèâÍ∞Ä Í∏∞Ï§ÄÏóêÏÑú Î∂ÄÏ°±ÌñàÎäîÍ∞Ä
- ÏòàÏãúÎãµÏïàÏóêÏÑú Ïñ¥ÎñªÍ≤å Í∞úÏÑ†ÎêòÏóàÎäîÍ∞Ä

3. Î∞òÎìúÏãú ÏïÑÎûò JSON ÌòïÏãùÏúºÎ°úÎßå Ï∂úÎ†•ÌïòÏã≠ÏãúÏò§. ÏÑ§Î™Ö Î¨∏Íµ¨Î•º Î∂ôÏù¥ÏßÄ ÎßàÏã≠ÏãúÏò§.

{{
  "example": "ÏòàÏãúÎãµÏïàÏùÑ Ïó¨Í∏∞Ïóê ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§.",
  "comparison": "ÎπÑÍµê ÏÑ§Î™ÖÏùÑ Ïó¨Í∏∞Ïóê ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§. Î∞òÎìúÏãú 500~700Ïûê Î∂ÑÎüâ."
}}

Ï†úÏãúÎ¨∏:
{chr(10).join(passages)}

ÏßàÎ¨∏:
{question}

ÌïôÏÉùÏùò ÎÖºÏà†Î¨∏:
{essay}
"""

    messages = [
        {"role": "system", "content": "ÎÑàÎäî Í≥†Îì±ÌïôÏÉù ÎÖºÏà† Ï≤®ÏÇ≠ ÏÑ†ÏÉùÎãòÏù¥Ïïº."},
        {"role": "user", "content": initial_prompt}
    ]

    parsed = {}
    example_text = ""
    max_attempts = 2

    for attempt in range(max_attempts):
        res = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=2000
        )
        content = res.choices[0].message.content
        print("üßæ GPT ÏùëÎãµ ÏõêÎ¨∏:\n", content)

        try:
            parsed = json.loads(content)
            new_example = parsed.get("example", "")
            print("‚úÖ ÏòàÏãúÎãµÏïà Í∏ÄÏûê Ïàò:", len(new_example))

            if len(new_example) >= min_chars or attempt == max_attempts - 1:
                example_text = new_example
                break

            messages.append({"role": "assistant", "content": new_example})
            messages.append({
                "role": "user",
                "content": (
                    f"Ïù¥Ï†Ñ ÏòàÏãúÎãµÏïàÏùÄ {len(new_example)}ÏûêÏûÖÎãàÎã§. ÏïÑÎûò Ï°∞Í±¥ÏùÑ ÏßÄÏºú Îã§Ïãú ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§:\n"
                    f"- Î∞òÎìúÏãú {min_chars + (attempt + 1) * 100}Ïûê Ïù¥ÏÉÅ ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§\n"
                    f"- Ï£ºÏû•Í≥º Í∑ºÍ±∞Î•º Ï∂îÍ∞ÄÌïòÍ≥† ÏòàÏãúÎ•º ÌôïÏû•ÌïòÏã≠ÏãúÏò§\n"
                    f"- ÎÖºÎ¶¨ ÌùêÎ¶ÑÍ≥º Î¨∏Ï≤¥Îäî Ïú†ÏßÄÌïòÏã≠ÏãúÏò§"
                )
            })
        except json.JSONDecodeError:
            print("‚ùå JSON ÌååÏã± Ïã§Ìå®:\n", content)
            continue

    example_text = parsed.get("example", "")
    comparison_text = parsed.get("comparison", "")

    return jsonify({
        "example": example_text,
        "comparison": comparison_text,
        "length_valid": len(example_text) >= min_chars,
        "length_actual": len(example_text)
    })


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
